// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\Qiu_YQ\IIR_High_pass_Filter_fix_point_p.v
// Created: 2021-11-15 00:21:48
// 
// Generated by MATLAB 9.8 and HDL Coder 3.16
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: IIR_High_pass_Filter_fix_point_p
// Source Path: Qiu_YQ/subsystem/IIR High-pass Filter(fix-point p
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module IIR_High_pass_Filter_fix_point_p
          (clk,
           reset_x,
           enb,
           Input_rsvd,
           Output_rsvd);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [15:0] Input_rsvd;  // sfix16_En11
  output  signed [63:0] Output_rsvd;  // sfix64_En39


  wire signed [63:0] ConvertIn_out1;  // sfix64_En52
  wire signed [80:0] s_1_mul_temp;  // sfix81_En71
  wire signed [79:0] s_1_cast;  // sfix80_En71
  wire signed [63:0] s_1_out1;  // sfix64_En54
  reg signed [63:0] Delay11_out1;  // sfix64_En37
  reg signed [63:0] Delay21_out1;  // sfix64_En37
  wire signed [80:0] a_3_1_mul_temp;  // sfix81_En53
  wire signed [79:0] a_3_1_cast;  // sfix80_En53
  wire signed [63:0] a_3_1_out1;  // sfix64_En34
  wire signed [63:0] CastState1_out1;  // sfix64_En37
  wire signed [80:0] a_2_1_mul_temp;  // sfix81_En52
  wire signed [79:0] a_2_1_cast;  // sfix80_En52
  wire signed [63:0] a_2_1_out1;  // sfix64_En32
  wire signed [63:0] SumA21_sub_cast;  // sfix64_En53
  wire signed [63:0] SumA21_sub_cast_1;  // sfix64_En53
  wire signed [63:0] SumA21_sub_temp;  // sfix64_En53
  wire signed [63:0] SumA21_out1;  // sfix64_En33
  wire signed [63:0] SumA31_sub_cast;  // sfix64_En33
  wire signed [63:0] SumA31_sub_temp;  // sfix64_En33
  wire signed [63:0] SumA31_out1;  // sfix64_En34
  wire signed [80:0] b_2_1_mul_temp;  // sfix81_En52
  wire signed [79:0] b_2_1_cast;  // sfix80_En52
  wire signed [63:0] b_2_1_out1;  // sfix64_En34
  wire signed [63:0] SumB21_add_cast;  // sfix64_En33
  wire signed [63:0] SumB21_add_cast_1;  // sfix64_En33
  wire signed [63:0] SumB21_out1;  // sfix64_En33
  wire signed [63:0] SumB31_add_cast;  // sfix64_En35
  wire signed [63:0] SumB31_add_cast_1;  // sfix64_En35
  wire signed [63:0] SumB31_add_temp;  // sfix64_En35
  wire signed [63:0] SumB31_out1;  // sfix64_En34
  wire signed [63:0] CastStageIn2_out1;  // sfix64_En35
  wire signed [80:0] s_2_mul_temp;  // sfix81_En55
  wire signed [79:0] s_2_cast;  // sfix80_En55
  wire signed [63:0] s_2_out1;  // sfix64_En41
  reg signed [63:0] Delay12_out1;  // sfix64_En41
  reg signed [63:0] Delay22_out1;  // sfix64_En41
  wire signed [80:0] a_3_2_mul_temp;  // sfix81_En57
  wire signed [79:0] a_3_2_cast;  // sfix80_En57
  wire signed [31:0] a_3_2_out1;  // sfix32_En36
  wire signed [63:0] CastState2_out1;  // sfix64_En41
  wire signed [80:0] a_2_2_mul_temp;  // sfix81_En56
  wire signed [79:0] a_2_2_cast;  // sfix80_En56
  wire signed [31:0] a_2_2_out1;  // sfix32_En35
  wire signed [63:0] SumA22_sub_cast;  // sfix64_En39
  wire signed [63:0] SumA22_sub_cast_1;  // sfix64_En39
  wire signed [63:0] SumA22_sub_temp;  // sfix64_En39
  wire signed [63:0] SumA22_out1;  // sfix64_En37
  wire signed [63:0] SumA32_sub_cast;  // sfix64_En37
  wire signed [63:0] SumA32_sub_temp;  // sfix64_En37
  wire signed [63:0] SumA32_out1;  // sfix64_En38
  wire signed [80:0] b_2_2_mul_temp;  // sfix81_En56
  wire signed [79:0] b_2_2_cast;  // sfix80_En56
  wire signed [31:0] b_2_2_out1;  // sfix32_En35
  wire signed [63:0] SumB22_add_cast;  // sfix64_En38
  wire signed [63:0] SumB22_add_cast_1;  // sfix64_En38
  wire signed [63:0] SumB22_out1;  // sfix64_En38
  wire signed [63:0] SumB32_add_cast;  // sfix64_En38
  wire signed [63:0] SumB32_add_temp;  // sfix64_En38
  wire signed [63:0] SumB32_out1;  // sfix64_En37
  wire signed [63:0] CastStageIn3_out1;  // sfix64_En40
  wire signed [80:0] s_3_mul_temp;  // sfix81_En59
  wire signed [79:0] s_3_cast;  // sfix80_En59
  wire signed [63:0] s_3_out1;  // sfix64_En42
  wire signed [63:0] CastState3_out1;  // sfix64_En40
  reg signed [63:0] Delay13_out1;  // sfix64_En40
  wire signed [80:0] a_2_3_mul_temp;  // sfix81_En56
  wire signed [79:0] a_2_3_cast;  // sfix80_En56
  wire signed [31:0] a_2_3_out1;  // sfix32_En38
  wire signed [63:0] SumA23_sub_cast;  // sfix64_En39
  wire signed [63:0] SumA23_sub_cast_1;  // sfix64_En39
  wire signed [63:0] SumA23_out1;  // sfix64_En39
  wire signed [63:0] SumB23_sub_cast;  // sfix64_En39
  wire signed [63:0] SumB23_sub_cast_1;  // sfix64_En39
  wire signed [63:0] SumB23_out1;  // sfix64_En39


  assign ConvertIn_out1 = {{7{Input_rsvd[15]}}, {Input_rsvd, 41'b00000000000000000000000000000000000000000}};



  assign s_1_mul_temp = 17'sb01101100011001111 * ConvertIn_out1;
  assign s_1_cast = s_1_mul_temp[79:0];
  assign s_1_out1 = ({s_1_cast[79], s_1_cast[79:17]}) + $signed({1'b0, s_1_cast[16] & (s_1_cast[17] | (|s_1_cast[15:0]))});



  always @(posedge clk or posedge reset_x)
    begin : Delay21_process
      if (reset_x == 1'b1) begin
        Delay21_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= Delay11_out1;
        end
      end
    end



  assign a_3_1_mul_temp = 17'sb01111000011101001 * Delay21_out1;
  assign a_3_1_cast = a_3_1_mul_temp[79:0];
  assign a_3_1_out1 = ({{3{a_3_1_cast[79]}}, a_3_1_cast[79:19]}) + $signed({1'b0, a_3_1_cast[18] & (a_3_1_cast[19] | (|a_3_1_cast[17:0]))});



  always @(posedge clk or posedge reset_x)
    begin : Delay11_process
      if (reset_x == 1'b1) begin
        Delay11_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= CastState1_out1;
        end
      end
    end



  assign a_2_1_mul_temp = 17'sb01111000110010101 * Delay11_out1;
  assign a_2_1_cast = a_2_1_mul_temp[79:0];
  assign a_2_1_out1 = ({{4{a_2_1_cast[79]}}, a_2_1_cast[79:20]}) + $signed({1'b0, a_2_1_cast[19] & (a_2_1_cast[20] | (|a_2_1_cast[18:0]))});



  assign SumA21_sub_cast = ({s_1_out1[63], s_1_out1[63:1]}) + $signed({1'b0, s_1_out1[1] & s_1_out1[0]});
  assign SumA21_sub_cast_1 = {a_2_1_out1[42:0], 21'b000000000000000000000};
  assign SumA21_sub_temp = SumA21_sub_cast - SumA21_sub_cast_1;
  assign SumA21_out1 = ({{20{SumA21_sub_temp[63]}}, SumA21_sub_temp[63:20]}) + $signed({1'b0, SumA21_sub_temp[19] & (SumA21_sub_temp[20] | (|SumA21_sub_temp[18:0]))});



  assign SumA31_sub_cast = ({a_3_1_out1[63], a_3_1_out1[63:1]}) + $signed({1'b0, a_3_1_out1[1] & a_3_1_out1[0]});
  assign SumA31_sub_temp = SumA21_out1 - SumA31_sub_cast;
  assign SumA31_out1 = {SumA31_sub_temp[62:0], 1'b0};



  assign CastState1_out1 = {SumA31_out1[60:0], 3'b000};



  assign b_2_1_mul_temp = 17'sb01101110011001101 * Delay11_out1;
  assign b_2_1_cast = b_2_1_mul_temp[79:0];
  assign b_2_1_out1 = ({{2{b_2_1_cast[79]}}, b_2_1_cast[79:18]}) + $signed({1'b0, b_2_1_cast[17] & (b_2_1_cast[18] | (|b_2_1_cast[16:0]))});



  assign SumB21_add_cast = ({{4{CastState1_out1[63]}}, CastState1_out1[63:4]}) + $signed({1'b0, CastState1_out1[3] & (CastState1_out1[4] | (|CastState1_out1[2:0]))});
  assign SumB21_add_cast_1 = ({b_2_1_out1[63], b_2_1_out1[63:1]}) + $signed({1'b0, b_2_1_out1[1] & b_2_1_out1[0]});
  assign SumB21_out1 = SumB21_add_cast + SumB21_add_cast_1;



  assign SumB31_add_cast = {SumB21_out1[61:0], 2'b00};
  assign SumB31_add_cast_1 = ({{2{Delay21_out1[63]}}, Delay21_out1[63:2]}) + $signed({1'b0, Delay21_out1[1] & (Delay21_out1[2] | Delay21_out1[0])});
  assign SumB31_add_temp = SumB31_add_cast + SumB31_add_cast_1;
  assign SumB31_out1 = ({SumB31_add_temp[63], SumB31_add_temp[63:1]}) + $signed({1'b0, SumB31_add_temp[1] & SumB31_add_temp[0]});



  assign CastStageIn2_out1 = {SumB31_out1[62:0], 1'b0};



  assign s_2_mul_temp = 17'sb01011111011100011 * CastStageIn2_out1;
  assign s_2_cast = s_2_mul_temp[79:0];
  assign s_2_out1 = s_2_cast[77:14] + $signed({1'b0, s_2_cast[13] & (s_2_cast[14] | (|s_2_cast[12:0]))});



  always @(posedge clk or posedge reset_x)
    begin : Delay22_process
      if (reset_x == 1'b1) begin
        Delay22_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= Delay12_out1;
        end
      end
    end



  assign a_3_2_mul_temp = 17'sb01101010111110111 * Delay22_out1;
  assign a_3_2_cast = a_3_2_mul_temp[79:0];
  assign a_3_2_out1 = a_3_2_cast[52:21] + $signed({1'b0, a_3_2_cast[20] & (a_3_2_cast[21] | (|a_3_2_cast[19:0]))});



  always @(posedge clk or posedge reset_x)
    begin : Delay12_process
      if (reset_x == 1'b1) begin
        Delay12_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= CastState2_out1;
        end
      end
    end



  assign a_2_2_mul_temp = 17'sb01110011101001011 * Delay12_out1;
  assign a_2_2_cast = a_2_2_mul_temp[79:0];
  assign a_2_2_out1 = a_2_2_cast[52:21] + $signed({1'b0, a_2_2_cast[20] & (a_2_2_cast[21] | (|a_2_2_cast[19:0]))});



  assign SumA22_sub_cast = ({{2{s_2_out1[63]}}, s_2_out1[63:2]}) + $signed({1'b0, s_2_out1[1] & (s_2_out1[2] | s_2_out1[0])});
  assign SumA22_sub_cast_1 = {{28{a_2_2_out1[31]}}, {a_2_2_out1, 4'b0000}};
  assign SumA22_sub_temp = SumA22_sub_cast - SumA22_sub_cast_1;
  assign SumA22_out1 = ({{2{SumA22_sub_temp[63]}}, SumA22_sub_temp[63:2]}) + $signed({1'b0, SumA22_sub_temp[1] & (SumA22_sub_temp[2] | SumA22_sub_temp[0])});



  assign SumA32_sub_cast = {{31{a_3_2_out1[31]}}, {a_3_2_out1, 1'b0}};
  assign SumA32_sub_temp = SumA22_out1 - SumA32_sub_cast;
  assign SumA32_out1 = {SumA32_sub_temp[62:0], 1'b0};



  assign CastState2_out1 = {SumA32_out1[60:0], 3'b000};



  assign b_2_2_mul_temp = 17'sb01011000011001101 * Delay12_out1;
  assign b_2_2_cast = b_2_2_mul_temp[79:0];
  assign b_2_2_out1 = b_2_2_cast[52:21] + $signed({1'b0, b_2_2_cast[20] & (b_2_2_cast[21] | (|b_2_2_cast[19:0]))});



  assign SumB22_add_cast = ({{3{CastState2_out1[63]}}, CastState2_out1[63:3]}) + $signed({1'b0, CastState2_out1[2] & (CastState2_out1[3] | (|CastState2_out1[1:0]))});
  assign SumB22_add_cast_1 = {{29{b_2_2_out1[31]}}, {b_2_2_out1, 3'b000}};
  assign SumB22_out1 = SumB22_add_cast + SumB22_add_cast_1;



  assign SumB32_add_cast = ({{3{Delay22_out1[63]}}, Delay22_out1[63:3]}) + $signed({1'b0, Delay22_out1[2] & (Delay22_out1[3] | (|Delay22_out1[1:0]))});
  assign SumB32_add_temp = SumB22_out1 + SumB32_add_cast;
  assign SumB32_out1 = ({SumB32_add_temp[63], SumB32_add_temp[63:1]}) + $signed({1'b0, SumB32_add_temp[1] & SumB32_add_temp[0]});



  assign CastStageIn3_out1 = {SumB32_out1[60:0], 3'b000};



  assign s_3_mul_temp = 17'sb01101010101010101 * CastStageIn3_out1;
  assign s_3_cast = s_3_mul_temp[79:0];
  assign s_3_out1 = ({s_3_cast[79], s_3_cast[79:17]}) + $signed({1'b0, s_3_cast[16] & (s_3_cast[17] | (|s_3_cast[15:0]))});



  always @(posedge clk or posedge reset_x)
    begin : Delay13_process
      if (reset_x == 1'b1) begin
        Delay13_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= CastState3_out1;
        end
      end
    end



  assign a_2_3_mul_temp = 17'sb01110001100010110 * Delay13_out1;
  assign a_2_3_cast = a_2_3_mul_temp[79:0];
  assign a_2_3_out1 = a_2_3_cast[49:18] + $signed({1'b0, a_2_3_cast[17] & (a_2_3_cast[18] | (|a_2_3_cast[16:0]))});



  assign SumA23_sub_cast = ({{3{s_3_out1[63]}}, s_3_out1[63:3]}) + $signed({1'b0, s_3_out1[2] & (s_3_out1[3] | (|s_3_out1[1:0]))});
  assign SumA23_sub_cast_1 = {{31{a_2_3_out1[31]}}, {a_2_3_out1, 1'b0}};
  assign SumA23_out1 = SumA23_sub_cast - SumA23_sub_cast_1;



  assign CastState3_out1 = {SumA23_out1[62:0], 1'b0};



  assign SumB23_sub_cast = ({CastState3_out1[63], CastState3_out1[63:1]}) + $signed({1'b0, CastState3_out1[1] & CastState3_out1[0]});
  assign SumB23_sub_cast_1 = ({Delay13_out1[63], Delay13_out1[63:1]}) + $signed({1'b0, Delay13_out1[1] & Delay13_out1[0]});
  assign SumB23_out1 = SumB23_sub_cast - SumB23_sub_cast_1;



  assign Output_rsvd = SumB23_out1;

endmodule  // IIR_High_pass_Filter_fix_point_p

